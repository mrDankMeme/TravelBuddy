//
//  POIMapView.swift
//  TravelBuddy
//
//  Created by Niiaz Khasanov on 7/7/25.
//



import SwiftUI
import MapKit

public struct POIMapView: View {
    @StateObject private var vm: AnyPOIMapViewModel
    @EnvironmentObject private var router: MapRouter
    private let defaultRegionMeters: CLLocationDistance

    public init(viewModel: AnyPOIMapViewModel, defaultRegionMeters: CLLocationDistance) {
        _vm = StateObject(wrappedValue: viewModel)
        self.defaultRegionMeters = defaultRegionMeters
    }

    public var body: some View {
        MapViewRepresentable(
            annotations: vm.annotations,
            defaultRegionMeters: defaultRegionMeters,
            selectedId: Binding(
                get: { vm.selectedPOI?.id },                                  // ‚Üê –±–∏–Ω–¥–∏–º id
                set: { newId in
                    // –≤—ã–±–æ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ ‚Üí –Ω–∞—Ö–æ–¥–∏–º POI –∏ –∫–ª–∞–¥—ë–º –≤ VM (–¥–ª—è —Å–Ω–∏–ø–ø–µ—Ç–∞)
                    vm.selectedPOI = newId.flatMap { id in
                        vm.annotations.first(where: { $0.poi.id == id })?.poi
                    }
                }
            ),
            onSelect: { _ in } // –≤—ã–±–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –±–∏–Ω–¥–∏–Ω–≥; –ø—Ä—è–º–æ–π –∫–æ–ª–ª–±–µ–∫ –Ω–µ –Ω—É–∂–µ–Ω
        )
        .ignoresSafeArea()
        .onAppear { vm.fetch() }
        .sheet(item: Binding(
            get: { vm.selectedPOI },
            set: { vm.selectedPOI = $0 }
        ), onDismiss: {
            // üîë –ó–∞–∫—Ä—ã–ª–∏ —Å–Ω–∏–ø–ø–µ—Ç ‚Üí –±–∏–Ω–¥–∏–Ω–≥ selectedId —Å—Ç–∞–Ω–µ—Ç nil ‚Üí MapView —Å–Ω–∏–º–µ—Ç highlight
            vm.selectedPOI = nil
        }) { poi in
            POISnippetView(
                poi: poi,
                onDetails: {
                    // 1) –∑–∞–∫—Ä—ã—Ç—å —Å–Ω–∏–ø–ø–µ—Ç (—ç—Ç–æ —Å–Ω–∏–º–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∏–Ω–∞ —á–µ—Ä–µ–∑ –±–∏–Ω–¥–∏–Ω–≥)
                    vm.selectedPOI = nil
                    // 2) –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥–æ–π –≤ —Ä–æ—É—Ç–µ—Ä (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
                    DispatchQueue.main.async { router.goDetail(poi) }
                },
                onRoute: {
                    let coord = CLLocationCoordinate2D(latitude: poi.latitude, longitude: poi.longitude)
                    let item = MKMapItem(placemark: MKPlacemark(coordinate: coord))
                    item.name = poi.name
                    item.openInMaps()
                }
            )
            .presentationDetents([.height(200), .medium])
        }
    }
}
